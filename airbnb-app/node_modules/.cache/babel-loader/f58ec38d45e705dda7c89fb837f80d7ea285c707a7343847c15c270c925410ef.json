{"ast":null,"code":"import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar ISO weeks\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * const result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\nexport function differenceInCalendarISOWeeks(dateLeft, dateRight) {\n  const startOfISOWeekLeft = startOfISOWeek(dateLeft);\n  const startOfISOWeekRight = startOfISOWeek(dateRight);\n  const timestampLeft = startOfISOWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\n  const timestampRight = startOfISOWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekRight);\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarISOWeeks;","map":{"version":3,"names":["millisecondsInWeek","startOfISOWeek","getTimezoneOffsetInMilliseconds","differenceInCalendarISOWeeks","dateLeft","dateRight","startOfISOWeekLeft","startOfISOWeekRight","timestampLeft","getTime","timestampRight","Math","round"],"sources":["D:/Programming/Development/airbnb/airbnb-app/node_modules/date-fns/differenceInCalendarISOWeeks.mjs"],"sourcesContent":["import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar ISO weeks\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * const result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\nexport function differenceInCalendarISOWeeks(dateLeft, dateRight) {\n  const startOfISOWeekLeft = startOfISOWeek(dateLeft);\n  const startOfISOWeekRight = startOfISOWeek(dateRight);\n\n  const timestampLeft =\n    startOfISOWeekLeft.getTime() -\n    getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\n  const timestampRight =\n    startOfISOWeekRight.getTime() -\n    getTimezoneOffsetInMilliseconds(startOfISOWeekRight);\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarISOWeeks;\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,+BAA+B,QAAQ,4CAA4C;;AAE5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,4BAA4BA,CAACC,QAAQ,EAAEC,SAAS,EAAE;EAChE,MAAMC,kBAAkB,GAAGL,cAAc,CAACG,QAAQ,CAAC;EACnD,MAAMG,mBAAmB,GAAGN,cAAc,CAACI,SAAS,CAAC;EAErD,MAAMG,aAAa,GACjBF,kBAAkB,CAACG,OAAO,CAAC,CAAC,GAC5BP,+BAA+B,CAACI,kBAAkB,CAAC;EACrD,MAAMI,cAAc,GAClBH,mBAAmB,CAACE,OAAO,CAAC,CAAC,GAC7BP,+BAA+B,CAACK,mBAAmB,CAAC;;EAEtD;EACA;EACA;EACA,OAAOI,IAAI,CAACC,KAAK,CAAC,CAACJ,aAAa,GAAGE,cAAc,IAAIV,kBAAkB,CAAC;AAC1E;;AAEA;AACA,eAAeG,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}